spring.profiles.active=default,engine
#spring.profiles.include=sd-haproxy,sd-consul

#spring.main.allow-bean-definition-overriding=true
spring.application.name=adhoc-worker
server.servlet.application-display-name=${spring.application.name}
spring.config.import=classpath:jndi.properties

worker.local-cache.config=classpath:ehcache.xml
worker.local-cache.executions.capacity=100
worker.local-cache.executions.expiration.time-to-live=5m
worker.local-cache.adhoc-data.capacity=100
worker.local-cache.adhoc-data.expiration.time-to-live=5m

worker.shared-cache.config=classpath:redisson-jcache.yaml
worker.shared-cache.expiration.time-to-idle=20m
#worker.shared-cache.resources.key-fidelity=user
worker.execution.descriptor-dir=/usr/local/var/executions
worker.execution.retry.maxAttempts=1
worker.execution.retry.ignoreErrorCodes=query.no.data
worker.execution.timeout=20m

spring.banner.location=classpath:bannername.txt
spring.banner.image.location=classpath:banner.gif

management.endpoint.shutdown.enabled=true
management.endpoint.info.enabled=true
management.endpoint.health.enabled=true
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.endpoint.startup.enabled=true
management.endpoints.web.exposure.include=info,health,startup,shutdown,metrics,prometheus
management.metrics.enable.cache.local=false
server.port=8081
#spring.cache.ehcache.config=classpath:/adhoc-ehcache.xml
server.max-http-header-size=100KB
#server.tomcat.max-http-header-size=100KB
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=1m

jrs.server.scheme=http
jrs.server.host=host.docker.internal
jrs.server.port=8080
jrs.server.path=jasperserver-pro/rest_v2
jrs.server.username=jasperadmin
jrs.server.password=jasperadmin
jrs.server.http-read-timeout=20000

external.jdbc-drivers=/usr/local/drivers
worker.id=adhoc-worker-${random.int(100)}
executions.stealing.enabled=false

jrs.proxy.scheme=http
jrs.proxy.host=host.docker.internal
jrs.proxy.port=8080
jrs.proxy.path=jasperserver-pro/rest_v2
jrs.proxy.username=jasperadmin
jrs.proxy.password=jasperadmin
jrs.proxy.timedOut=3000

logging.level.root=INFO
logging.config=classpath:log4j2-spring.xml
spring.sleuth.enabled=false
spring.sleuth.web.servlet.enabled=true
spring.sleuth.web.client.enabled=true
spring.sleuth.baggage.correlation-fields=X-Authenticated-Tenant,X-Authenticated-User,X-Execution-ID
spring.sleuth.baggage.remote-fields=X-Authenticated-Tenant,X-Authenticated-User,X-Execution-ID
spring.sleuth.baggage.tag-fields=X-Authenticated-Tenant,X-Authenticated-User,X-Execution-ID
spring.sleuth.sampler.probability=1.0
# Sleuth has an unsampled path generator, but it doesn't notice remapped health endpoint
spring.sleuth.web.additional-skip-pattern=/actuator

#spring.zipkin.baseUrl=http://localhost:9411/


#spring.quartz.startup-delay=60s

property.licenseServerActivationPort=8080

resource.root=classpath:
groovy.root=classpath:/groovy/
feature.audit_monitoring.enabled=false

#spring.cloud.kubernetes.config.name=adhoc_worker
spring.cloud.kubernetes.config.enabled=false
spring.cloud.kubernetes.config.enable-api=false
#export SPRING_CLOUD_KUBERNETES_CONFIG_ENABLEAPI=false

spring.jta.log-dir=transaction-logs2

spring.task.execution.thread-name-prefix=worker-common-
spring.task.execution.pool.max-size=32
spring.task.execution.pool.queue-capacity=1000
spring.task.execution.pool.keep-alive=10s

spring.task.scheduling.thread-name-prefix=worker-scheduling-
spring.task.scheduling.pool.size=3

worker.execution.thread-name-prefix=query-execution-
worker.execution.pool.max-size=16
#worker.execution.pool.core-size=8
worker.execution.pool.queue-capacity=8
worker.execution.max-queue-capacity=1000
worker.execution.enqueue-timeout=1ms

worker.shared-cache.execution.thread-name-prefix=cache-task-
worker.shared-cache.execution.pool.max-size=32
worker.shared-cache.execution.pool.queue-capacity=100
worker.shared-cache.execution.pool.keep-alive=10s

javascript.optimize=false

product.name=scalable-query-engine

resilience4j.retry.instances.fetchData.maxAttempts=5
resilience4j.retry.instances.fetchData.waitDuration=5s
resilience4j.retry.instances.fetchData.enableExponentialBackoff=true
resilience4j.retry.instances.fetchData.exponentialBackoffMultiplier=1.5
resilience4j.retry.instances.fetchData.retryExceptions=\
  com.jaspersoft.commons.datarator.exception.ExtensiveFetchDataLockFailedException,\
  com.jaspersoft.commons.datarator.exception.InvalidDatasetException,\
  com.jaspersoft.jasperserver.api.metadata.common.service.JSDataSourceConnectionFailedException

spring.main.lazy-initialization=true
